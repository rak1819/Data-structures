Given an integer n, return the number of prime numbers that are strictly less than n.

 

Example 1:

Input: n = 10
Output: 4
Explanation: There are 4 prime numbers less than 10, they are 2, 3, 5, 7.
Example 2:

Input: n = 0
Output: 0
Example 3:

Input: n = 1
Output: 0

explanation :

if 2 is prime number then the multiples of 2 is prime (4,6,8,10,12,14,16)

10 :
take an array 
with n+1 size ignore 0,1,2  indexes

arr :   1 1 1 1 1 1 1 1 1
        _ _ _ _ _ _ _ _ _
indexes 2 3 4 5 6 7 8 9 10

mark the mutiples with 0

arr :   1 1 0 1 0 1 0 0 0
        _ _ _ _ _ _ _ _ _
indexes 2 3 4 5 6 7 8 9 10
__________________________________________________________________________
java code:
 class Solution {
    public int countPrimes(int n) {
        int[] arr = new int[n+1];
        int count = 0;
        for(int i=2;i*i<=n;i++){
            if(arr[i]==0){
                for(int j = i*i;j<=n;j+=i){
                    arr[j] =1;
                }
            }
        }
        for(int i=2;i<n;i++){
            if(arr[i]==0){
                count++;
            }
        }
        return count;
    }
}
__________________________________________________________________________

time complexity - (O(nlogn((nlogn)) for logic)-for printing the values(o(n))
space complexity - o(n)


