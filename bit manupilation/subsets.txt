Given an integer array nums of unique elements, return all possible 
subsets
 (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]
Example 2:

Input: nums = [0]
Output: [[],[0]]
____________________________________________________________________________
 

java code:

using bit manupilation
____________________________________________________________________________


class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        int n = nums.length;
        List<List<Integer>> ans= new ArrayList<>();
        int total = (1<<n);
        int count = 0;
        while(count<total){
            int bit = count;
            int c =0;
            List<Integer> obj = new ArrayList<>();
            while(bit>=1){
                if((bit&1)==1){
                    obj.add(nums[c]);
                }
                bit >>= 1;
                c++;
            }
            ans.add(new ArrayList<>(obj));
            count++;
        }
        return ans;
    }
}


time complexity 0(2(power)n)  n = size of the array




using backtracking
including and excluding method

java code:

_____________________________________________________________________________


class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        int n = nums.length;
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> obj = new ArrayList<>();
        int index = 0;
        subsets(index,nums,obj,ans,n);
        return ans;
        }
    public static void subsets(int index,int[] nums,List<Integer> obj,List<List<Integer>> ans ,int n){
        if(index>=n){
            ans.add(new ArrayList<>(obj));
            return;
        }
        subsets(index+1,nums,obj,ans,n);
        int temp = nums[index];
        obj.add(temp);
        subsets(index+1,nums,obj,ans,n);
        obj.remove(obj.size()-1);
    
    }
}
