Implement a first in first out (FIFO) queue using only two stacks. The implemented queue should support all the functions of a normal queue (push, peek, pop, and empty).

Implement the MyQueue class:

void push(int x) Pushes element x to the back of the queue.
int pop() Removes the element from the front of the queue and returns it.
int peek() Returns the element at the front of the queue.
boolean empty() Returns true if the queue is empty, false otherwise.


java code:

__________________________________________________________________________
class MyQueue {
    Stack<Integer> stack;

    public MyQueue() {
        stack = new Stack<Integer>();
    }
    
    public void push(int x) {
        if(stack.isEmpty()){
            stack.push(x);
        }
        else{
        Stack<Integer> obj = new Stack<>();
        while(!stack.isEmpty()){
            obj.push(stack.pop());
        }
        stack.push(x);
        while(!obj.isEmpty()){
            stack.push(obj.pop());
        }
        }
    }
    
    public int pop() {
        if(stack.isEmpty()){
            return -1;
        }
        return stack.pop();
        
    }
    
    public int peek() {
        if(stack.isEmpty()){
            return -1;
        }
        return stack.peek();
        
        
    }
    
    public boolean empty() {
        return stack.isEmpty();
        
    }
}
____________________________________________________________________________

