The next greater element of some element x in an array is the first greater element that is to the right of x in the same array.

You are given two distinct 0-indexed integer arrays nums1 and nums2, where nums1 is a subset of nums2.

For each 0 <= i < nums1.length, find the index j such that nums1[i] == nums2[j] and determine the next greater element of nums2[j] in nums2. If there is no next greater element, then the answer for this query is -1.

Return an array ans of length nums1.length such that ans[i] is the next greater element as described above.

 

Example 1:

Input: nums1 = [4,1,2], nums2 = [1,3,4,2]
Output: [-1,3,-1]
Explanation: The next greater element for each value of nums1 is as follows:
- 4 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.
- 1 is underlined in nums2 = [1,3,4,2]. The next greater element is 3.
- 2 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.
Example 2:

Input: nums1 = [2,4], nums2 = [1,2,3,4]
Output: [3,-1]
Explanation: The next greater element for each value of nums1 is as follows:
- 2 is underlined in nums2 = [1,2,3,4]. The next greater element is 3.
- 4 is underlined in nums2 = [1,2,3,4]. There is no next greater element, so the answer is -1.


java code:
____________________________________________________________________________

brute force:
class Solution {
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
        int n = nums1.length;
        int m = nums2.length;
        for(int i=0;i<n;i++){
            int ind = check(nums1[i],nums2);
            int ans = -1;
            if(ind!=-1){
                ind++;
                while(ind<m){
                    if(nums1[i]<nums2[ind]){
                        ans=nums2[ind];
                        break;
                    }
                    ind++;
                }
            }
            nums1[i]=ans;
        }
        return nums1;
        
    }
    public static int check(int num ,int[] nums2){
        int n = nums2.length;
        for(int i=0;i<n;i++){
            if(num ==nums2[i]){
                return i;
            }
        }
        return -1;
    }
}
______________________________________________________________________
time complexity : o(nums1.length*nums2.length);
______________________________________________________________________

optimal:
class Solution {
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
        Stack<Integer> st = new Stack<Integer>();
        int n = nums2.length-1;
        while(n>=0){
            int num =nums2[n];
            while(!st.isEmpty()){
                if(num<st.peek()){
                    send(nums1,st.peek(),num);
                    st.push(num);
                    break;
                }
                else{
                    st.pop();
                }
            }
            if(st.isEmpty()){
                st.push(num);
                send(nums1,-1,num);
            }
            n--;
        }
        return nums1;
    }
    public static void send(int[] nums1,int set,int num){
        for(int i=0;i<nums1.length;i++){
            if(num==nums1[i]){
                nums1[i]=set;
                break;
            }
        }
    }
}
_____________________________________________________________________________

time complexity - o(nums1.length)