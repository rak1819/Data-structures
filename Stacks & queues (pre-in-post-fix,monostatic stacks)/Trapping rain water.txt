Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.

 

Example 1:


Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.
Example 2:

Input: height = [4,2,0,3,2,5]
Output: 9
____________________________________________________________________________
java code :

brute force:
class Solution {
    public int trap(int[] height) {
        int n = height.length;
        int[] leftmax = new int[n];
        int[] rightmax = new int[n];
        int count = 0;
        for(int i =0;i<n-1;i++){
            if(height[i]==height[i+1]){
                count++;
            }
        }
        if(count==n){
            return 0;
        }
        for(int i =0;i<n;i++){
            int num = height[i];
            int ans = 0;
            for(int j = i-1;j>=0;j--){
                if(height[j]>num){
                    ans = Math.max(ans,height[j]);
                }
            }
            leftmax[i] = ans;
            
        }
        for(int i =0;i<n;i++){
            int num = height[i];
            int ans = 0;
            for(int j = i+1;j<n;j++){
                if(height[j]>num){
                    ans = Math.max(ans,height[j]);
                }
            }
            rightmax[i] = ans;
        }
        int sum = 0;
        for(int i =0;i<n;i++){
            int min =Math.min(leftmax[i],rightmax[i]);
            if(min!=0){
                sum+=min - height[i];
            }
        }
        return sum;
    }

}
____________________________________________________________________________
time complexity  = o(n^2)
space complexity = o(2n)

____________________________________________________________________________

optimal using two pointer:

____________________________________________________________________________
class Solution {
    public int trap(int[] height) {
        int l = 0;
        int r = height.length-1;
        int sum = 0;
        int rmax = 0;
        int lmax = 0;
        while(l<=r){
            if(height[l]<=height[r]){
                if(height[l]>=lmax){
                    lmax = height[l];
                }
                else{
                    sum+=lmax - height[l];
                }
                l++;
            }
            else{
                if(height[r]>=rmax){
                    rmax = height[r];
                }
                else{
                    sum+=rmax - height[r];
                }
                r--;
            }
        }
        return sum;
        
    }
}
_____________________________________________________________________________
time complexity  = o(n)
space complexity = o(1)
_____________________________________________________________________________