Given string num representing a non-negative integer num, and an integer k, return the smallest possible integer after removing k digits from num.

 

Example 1:

Input: num = "1432219", k = 3
Output: "1219"
Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.
Example 2:

Input: num = "10200", k = 1
Output: "200"
Explanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.
Example 3:

Input: num = "10", k = 2
Output: "0"
Explanation: Remove all the digits from the number and it is left with nothing which is 0.

java code
___________________________________________________________________________________________

class Solution {
    public String removeKdigits(String num, int k) {
        Stack<Character> st = new Stack<Character>();
        if(k>=num.length()){
            return "0";
        }
        for(char i:num.toCharArray()){
            while(!st.isEmpty() && st.peek()>i && k>0){
                st.pop();
                k--;
            }
            st.push(i);
        }
        while(k>0){
            st.pop();
            k--;
        }
        StringBuilder obj = new StringBuilder();
        for(char i:st){
            obj.append(i);
            
        }
        while(obj.length()>0 && obj.charAt(0)=='0'){
            obj.deleteCharAt(0);
        }
        return obj.length()==0?"0":obj.toString();
    }
}

_____________________________________________________________________________________________

time complexity : o(n)
space complexity: o(n)
