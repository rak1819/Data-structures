You are given an integer array nums. The range of a subarray of nums is the difference between the largest and smallest element in the subarray.

Return the sum of all subarray ranges of nums.

A subarray is a contiguous non-empty sequence of elements within an array.

 

Example 1:

Input: nums = [1,2,3]
Output: 4
Explanation: The 6 subarrays of nums are the following:
[1], range = largest - smallest = 1 - 1 = 0 
[2], range = 2 - 2 = 0
[3], range = 3 - 3 = 0
[1,2], range = 2 - 1 = 1
[2,3], range = 3 - 2 = 1
[1,2,3], range = 3 - 1 = 2
So the sum of all ranges is 0 + 0 + 0 + 1 + 1 + 2 = 4.
java code :
______________________________________________________________________________

class Solution {
    public long subArrayRanges(int[] nums) {
        int[] minle = minleft(nums);
        int[] minri = minright(nums);
        int[] maxle = maxleft(nums);
        int[] maxri = maxright(nums);
        long min = 0;
        long max = 0;
        for(int i =0;i<nums.length;i++){
            long first = i - minle[i];
            long second =minri[i]-i;
            long pro = first*second;
            pro = pro*nums[i];
            min = min+pro;
            first = i - maxle[i];
            second =maxri[i]-i;
            pro = first*second;
            pro = pro*nums[i];
            max = max+pro;

        }
        return max - min;
    
        
    }
    public static int[] minleft(int[] nums){
        Stack<Integer> st = new Stack<Integer>();
        int arr[] = new int[nums.length];
        for(int i =0;i<nums.length;i++){
            int num = nums[i];
            while(!st.isEmpty() && nums[st.peek()]>num){
                st.pop();
            }
            if(st.isEmpty()){
                arr[i] = -1;
            }
            else{
                arr[i] = st.peek();
            }
            st.push(i);
        }
        return arr;
    }
        public static int[] maxleft(int[] nums){
        Stack<Integer> st = new Stack<Integer>();
        int arr[] = new int[nums.length];
        for(int i =0;i<nums.length;i++){
            int num = nums[i];
            while(!st.isEmpty() && nums[st.peek()]<num){
                st.pop();
            }
            if(st.isEmpty()){
                arr[i] = -1;
            }
            else{
                arr[i] = st.peek();
            }
            st.push(i);
        }
         return arr;
    }
    public static int[] minright(int[] nums){
        Stack<Integer> st = new Stack<Integer>();
        int arr[] = new int[nums.length];
        for(int i =nums.length-1;i>=0;i--){
            int num = nums[i];
            while(!st.isEmpty() && nums[st.peek()]>=num){
                st.pop();
            }
            if(st.isEmpty()){
                arr[i] = nums.length;
            }
            else{
                arr[i] = st.peek();
            }
            st.push(i);
        }
        return arr;
    }
        public static int[] maxright(int[] nums){
        Stack<Integer> st = new Stack<Integer>();
        int arr[] = new int[nums.length];
        for(int i =nums.length-1;i>=0;i--){
            int num = nums[i];
            while(!st.isEmpty() && nums[st.peek()]<=num){
                st.pop();
            }
            if(st.isEmpty()){
                arr[i] = nums.length;
            }
            else{
                arr[i] = st.peek();
            }
            st.push(i);
        }
     return arr;
    }
}
___________________________________________________________________________
time complexity - o(n);
space complexity- o(4n);