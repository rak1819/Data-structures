Given a circular integer array nums (i.e., the next element of nums[nums.length - 1] is nums[0]), return the next greater number for every element in nums.

The next greater number of a number x is the first greater number to its traversing-order next in the array, which means you could search circularly to find its next greater number. If it doesn't exist, return -1 for this number.

 

Example 1:

Input: nums = [1,2,1]
Output: [2,-1,2]
Explanation: The first 1's next greater number is 2; 
The number 2 can't find next greater number. 
The second 1's next greater number needs to search circularly, which is also 2.
Example 2:

Input: nums = [1,2,3,4,3]
Output: [2,3,4,-1,4]


java code:-
_______________________________________________________________________________

class Solution {
    public int[] nextGreaterElements(int[] nums) {
        int n = nums.length-1;
        Stack<Integer> st = new Stack<Integer>();
        int max = Integer.MIN_VALUE;
        while(n>=0){
            int num = nums[n];
            max = Math.max(max,num);
            while(!st.isEmpty()){
                if(num<st.peek()){
                    nums[n] = st.peek();
                    break;
                }
                else{
                    st.pop();
                }
            }
            if(st.isEmpty()){
                int ans = -1;
                for(int i=0;i<=n;i++){
                    if(num<nums[i]){
                        ans = nums[i];
                        break;
                    }
                }
                nums[n]=ans;
            }
            st.push(num);
            n--;
        }
        return nums;
    }
}
_____________________________________________________________________________